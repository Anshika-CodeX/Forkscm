@using ForkCommon.Model.Entity.Enums
@using ForkCommon.Model.Entity.Pocos
@using ForkFrontend.Logic.Services.Managers
@using ForkFrontend.Logic.Services.Notifications
@inject ILogger<SidebarEntity> Logger
@inject INotificationService NotificationService

<div
    class="@(IsSelected ? "bg-forkBlue-hover text-label-hover" : "text-label hover:text-label-hover") h-20 w-full flex items-center py-3 pl-5 cursor-pointer"
    @onclick="OnSelectEntity">
    @* Status *@
    <StatusIndicator Status="Value!.Entity.Status ?? EntityStatus.Stopped"></StatusIndicator>
    @* Icon *@
    <span class="icon px-3 text-2xl">2</span>
    @* Content *@
    <div class="flex-1">
        <p class="text-md">@Value?.Entity.Name</p>
        @if (Value?.Entity is Server server)
        {
            <p class="text-sm">@(server.ServerPlayers.Count(p => p.IsOnline)) / @(server.VanillaSettings?.MaxPlayers ?? 0)</p>
        }
    </div>
    @* Selected Indicator *@
    <SelectedIndicatorVertical IsVisible="IsSelected" ParentHeight="72"
                               NegativeYMargins="3"></SelectedIndicatorVertical>
</div>

@code {

    [Parameter] [EditorRequired] public EntityStateManager? Value { get; set; }

    [Parameter] [EditorRequired] public EventCallback<IEntity> OnClickCallback { get; set; }

    [Parameter] public bool IsSelected { get; set; }

    protected override Task OnInitializedAsync()
    {
        Value!.EntityStatusChangedNotificationHandler.After += _ =>
        {
            StateHasChanged();
            return Task.CompletedTask;
        };
        Value!.UpdatePlayerNotificationHandler.After += _ =>
        {
            StateHasChanged();
            return Task.CompletedTask;
        };
        return base.OnInitializedAsync();
    }

    private async Task OnSelectEntity()
    {
        if (OnClickCallback.HasDelegate)
        {
            await OnClickCallback.InvokeAsync(Value?.Entity);
        }
    }

}